#!/usr/bin/env cljsh -t
(require 'clojure.string)
(require 'clojure.java.shell)
(require 'hiccup.core)

(defn ul [coll] [:ul (for [x (map hiccup.core/h (map str coll))] [:li x])])

(let [	w (reduce str "" (line-seq (java.io.BufferedReader. *in*)))
		wmap (-> w symbol resolve meta)
		wdoc (-> w symbol resolve meta (#'clojure.repl/print-doc) with-out-str)
		]
	;(clojure.java.shell/sh "bash" "-c" (str "echo '" wdoc "'" " | bcat"))
	(let [pageh (str "<html>" "<h1>" (:name wmap) "</h1>" (:arglists wmap)"</p>" (:doc wmap) "<html>")
		page 
			(hiccup.core/html 
				[:h2 (str (:name wmap))] 
				[:h4 (if (:private wmap) "Private" "Public") " " (if (:macro wmap) "Macro" "Function")]
				[:h4 "Namespace"]
				[:em (str (:ns wmap))]
				[:p]
				[:h4 "Arity"]
				[:ul (for [x (map hiccup.core/h (map str (:arglists wmap)))] [:li x])]
				(ul (:arglists wmap))
				;;[:ul (map :li (map hiccup.core/h (map str (:arglists wmap))))]
				;;[:p]
				[:h4 "Documentation"]
				(hiccup.core/escape-html (:doc wmap))
				[:h4 "Meta map"]
				(hiccup.core/escape-html (with-out-str (pprint wmap)))
				)
		]
		(clojure.java.shell/sh "bash" "-c" (str "echo '" page "'" " | bcat"))
	))
(.close *in*)

;; (let [w "reduce"] (-> w symbol resolve meta (#'clojure.repl/print-doc)))
;; (clojure.java.shell/sh "bash" "-c" (str "cljsh -c '" "(doc " (with-out-str (print w)) ")" "'" "| bcat"))
