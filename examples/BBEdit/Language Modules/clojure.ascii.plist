{
	BBEditDocumentType = "CodelessLanguageModule";
	BBLMColorsSyntax = YES;
	BBLMIsCaseSensitive = YES;
	BBLMKeywordList = (
		"!",
		"!=",
		"$",
		"$0",
		"$1",
		"$10",
		"$11",
		"$12",
		"$13",
		"$14",
		"$15",
		"$2",
		"$3",
		"$4",
		"$5",
		"$6",
		"$7",
		"$8",
		"$9",
		"$args",
		"$command-event",
		"$idx",
		"$main-args",
		"$prompt-event",
		"%",
		"&",
		"*",
		"+",
		"-",
		"/",
		"<",
		"<<",
		"<=",
		"=",
		">",
		">=",
		">>",
		"?",
		"@",
		"NaN?",
		"^",
		abort,
		abs,
		acos,
		acosh,
		add,
		address,
		amb,
		and,
		append,
		"append-file",
		apply,
		args,
		array,
		"array-list",
		"array?",
		asin,
		asinh,
		assoc,
		"assoc-set",
		atan,
		atan2,
		atanh,
		"atom?",
		"base64-dec",
		"base64-enc",
		"bayes-query",
		"bayes-train",
		begin,
		beta,
		betai,
		bind,
		binomial,
		callback,
		case,
		catch,
		ceil,
		"change-dir",
		char,
		chop,
		clean,
		close,
		"command-event",
		"command-line",
		cond,
		cons,
		constant,
		context,
		"context?",
		"copy-file",
		cos,
		cosh,
		count,
		cpymem,
		crc32,
		"crit-chi2",
		"crit-z",
		"current-line",
		curry,
		date,
		"date-value",
		debug,
		dec,
		def,
		"def-",
		defn,
		"defn-",
		"defmacro",
		"def-new",
		default,
		define,
		"define-macro",
		delete,
		"delete-file",
		"delete-url",
		destroy,
		det,
		device,
		difference,
		directory,
		"directory?",
		div,
		"do-until",
		"do-while",
		doargs,
		dolist,
		dostring,
		dotimes,
		dotree,
		dump,
		dup,
		"empty?",
		encrypt,
		"ends-with",
		env,
		erf,
		"error-event",
		"error-number",
		"error-text",
		eval,
		"eval-string",
		exec,
		exists,
		exit,
		exp,
		expand,
		explode,
		factor,
		fft,
		"file-info",
		"file?",
		filter,
		find,
		"find-all",
		first,
		flat,
		float,
		"float?",
		floor,
		flt,
		for,
		"for-all",
		fork,
		format,
		fv,
		gammai,
		gammaln,
		gcd,
		"get-char",
		"get-float",
		"get-int",
		"get-long",
		"get-string",
		"get-url",
		global,
		"global?",
		if,
		ifft,
		import,
		inc,
		index,
		int,
		integer,
		"integer?",
		intersect,
		invert,
		irr,
		join,
		"lambda?",
		last,
		"legal?",
		length,
		let,
		letex,
		letn,
		list,
		"list?",
		load,
		local,
		log,
		lookup,
		"lower-case",
		"macro?",
		"main-args",
		"make-dir",
		map,
		mat,
		match,
		max,
		member,
		min,
		mod,
		mul,
		multiply,
		name,
		"net-accept",
		"net-close",
		"net-connect",
		"net-error",
		"net-eval",
		"net-listen",
		"net-local",
		"net-lookup",
		"net-peek",
		"net-peer",
		"net-ping",
		"net-receive",
		"net-receive-from",
		"net-receive-udp",
		"net-select",
		"net-send",
		"net-send-to",
		"net-send-udp",
		"net-service",
		"net-sessions",
		new,
		nil,
		"nil?",
		normal,
		not,
		now,
		nper,
		npv,
		nth,
		"nth-set",
		"null?",
		"number?",
		open,
		or,
		ostype,
		pack,
		parse,
		"parse-date",
		peek,
		pipe,
		pmt,
		pop,
		"pop-assoc",
		"post-url",
		pow,
		"pretty-print",
		"primitive?",
		print,
		println,
		"prob-chi2",
		"prob-z",
		process,
		"prompt-event",
		"protected?",
		push,
		"put-url",
		pv,
		quote,
		"quote?",
		rand,
		random,
		randomize,
		"read-buffer",
		"read-char",
		"read-file",
		"read-key",
		"read-line",
		"real-path",
		ref,
		"ref-all",
		"ref-set",
		regex,
		"regex-comp",
		"remove-dir",
		"rename-file",
		replace,
		"replace-assoc",
		reset,
		rest,
		reverse,
		rotate,
		round,
		save,
		search,
		seed,
		seek,
		select,
		semaphore,
		sequence,
		series,
		set,
		"set-assoc",
		"set-locale",
		"set-nth",
		"set-ref",
		"set-ref-all",
		setq,
		sgn,
		share,
		signal,
		silent,
		sin,
		sinh,
		sleep,
		slice,
		sort,
		source,
		spawn,
		sqrt,
		"starts-with",
		string,
		"string?",
		sub,
		swap,
		sym,
		"symbol?",
		symbols,
		sync,
		"sys-error",
		"sys-info",
		tan,
		tanh,
		throw,
		"throw-error",
		time,
		"time-of-day",
		timer,
		"title-case",
		trace,
		"trace-highlight",
		transpose,
		trim,
		true,
		"true?",
		unicode,
		unify,
		unique,
		unless,
		unpack,
		until,
		"upper-case",
		utf8,
		utf8len,
		uuid,
		"wait-pid",
		when,
		while,
		"write-buffer",
		"write-char",
		"write-file",
		"write-line",
		"xml-error",
		"xml-parse",
		"xml-type-tags",
		"zero?",
		"|",
		"~",
	);
	BBLMLanguageCode = cljr;
	"BBLMLanguageDisplayName" = Clojure;
	BBLMScansFunctions = YES;
	BBLMSuffixMap = (
		{
			BBLMLanguageSuffix = ".clj";
		},
	);
	"Language Features" = {
		"Comment Pattern" = "(?x:
			(?>	[;]		.*			$		)
		)";
		"Function Pattern" = "(?x:
			[ \	]*
			(?P<function>
				\\(
					(?> def[^ ]* | declare | ns )
					(?> 
						(?P<ameta>
							\\^[^ {]+
						)
						|
						(?P<curlie>
							\\^[^}]+.
						)
						|
						\\s+
					)*
					(?P<function_name>
					
						(?P<identifier>
							[!'$%&*+\\-./:<=>?@~0-9A-Z_a-z]+
						)
					)
					[^(]
					,?
					\\s*
			)
		)";
		"String Pattern" = "(?x:
			(?>	\"			(?s: \\\\. | [^\"] )*?		(?: \"			| \\z )	)
		)";
		"Skip Pattern" = "(?x:
			(?>
				(?P>comment) | (?P>string)
			)
		)";
		"Identifier and Keyword Character Class" = "!$%&*+-./:<=>?@^~0-9A-Z_a-z";
	};
}
